// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bim_edu.DataContect.Controllers;

namespace bimedu.Migrations
{
    [DbContext(typeof(BimEduDataContext))]
    [Migration("20191020135441_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("bim_edu.Models.ApplicationError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date");

                    b.Property<bool>("isremoved");

                    b.Property<string>("message");

                    b.Property<string>("where");

                    b.HasKey("Id");

                    b.ToTable("applicationerrors");
                });

            modelBuilder.Entity("bim_edu.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("LevelOfEducation");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("isStaff");

                    b.Property<bool>("isremoved");

                    b.Property<string>("photofilepath");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("bim_edu.Models.ApplicationUserLogin", b =>
                {
                    b.Property<int>("ApplicationUserLoginId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("date");

                    b.Property<bool>("isremoved");

                    b.HasKey("ApplicationUserLoginId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("bim_edu.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("isremoved");

                    b.HasKey("CertificationId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("bim_edu.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("CourseLecturerId");

                    b.Property<int>("ProgrammeId");

                    b.Property<DateTime>("date");

                    b.Property<bool>("isremoved");

                    b.Property<string>("message");

                    b.HasKey("CommentId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseLecturerId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("bim_edu.Models.CommentReply", b =>
                {
                    b.Property<int>("CommentReplyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("CommentId");

                    b.Property<DateTime>("date");

                    b.Property<bool>("isremoved");

                    b.Property<string>("message");

                    b.HasKey("CommentReplyId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentReplies");
                });

            modelBuilder.Entity("bim_edu.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<bool>("isremoved");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("bim_edu.Models.CourseLecturer", b =>
                {
                    b.Property<int>("CourseLecturerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("LecturerId");

                    b.Property<int>("ProgrammeId");

                    b.Property<bool>("isremoved");

                    b.HasKey("CourseLecturerId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("CourseLecturers");
                });

            modelBuilder.Entity("bim_edu.Models.Lecturer", b =>
                {
                    b.Property<int>("LecturerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("MoreBiography");

                    b.Property<string>("Qualifications");

                    b.Property<bool>("isremoved");

                    b.HasKey("LecturerId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("bim_edu.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentType");

                    b.Property<int>("StudentFeeToPayId");

                    b.Property<bool>("isremoved");

                    b.HasKey("PaymentId");

                    b.HasIndex("StudentFeeToPayId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("bim_edu.Models.PaymentByPassCode", b =>
                {
                    b.Property<int>("PaymentByPassCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("date");

                    b.Property<bool>("isremoved");

                    b.HasKey("PaymentByPassCodeId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PaymentByPassCodes");
                });

            modelBuilder.Entity("bim_edu.Models.ProgramCalender", b =>
                {
                    b.Property<int>("ProgramCalenderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("PathToCalender");

                    b.Property<bool>("isremoved");

                    b.HasKey("ProgramCalenderId");

                    b.ToTable("ProgramCalenders");
                });

            modelBuilder.Entity("bim_edu.Models.ProgramDocument", b =>
                {
                    b.Property<int>("ProgramDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("FilePath");

                    b.Property<int>("ProgrammeId");

                    b.Property<bool>("isremoved");

                    b.HasKey("ProgramDocumentId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("ProgramDocuments");
                });

            modelBuilder.Entity("bim_edu.Models.Programme", b =>
                {
                    b.Property<int>("ProgrammeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ApplicationFee");

                    b.Property<int>("CertificationId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double>("Fee");

                    b.Property<string>("Language");

                    b.Property<int>("LecturerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProgramCalenderId");

                    b.Property<string>("Url");

                    b.Property<bool>("isremoved");

                    b.HasKey("ProgrammeId");

                    b.HasIndex("CertificationId");

                    b.HasIndex("ProgramCalenderId");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("bim_edu.Models.ProgrammeApplication", b =>
                {
                    b.Property<int>("ProgrammeApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateApplied");

                    b.Property<int?>("ProgrammeId");

                    b.Property<string>("applicationuserId");

                    b.Property<bool>("isApproved");

                    b.Property<bool>("isRejected");

                    b.Property<bool>("isremoved");

                    b.HasKey("ProgrammeApplicationId");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("applicationuserId");

                    b.ToTable("ProgrammeApplications");
                });

            modelBuilder.Entity("bim_edu.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("Description");

                    b.Property<string>("FilePath");

                    b.Property<int>("ProgrammeId");

                    b.Property<bool>("isremoved");

                    b.HasKey("QuestionId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("bim_edu.Models.QuestionLecturerEvaluateStudentSolution", b =>
                {
                    b.Property<int>("QuestionLecturerEvaluateStudentSolutionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath");

                    b.Property<int>("QuestionStudentProvidedSolutionId");

                    b.Property<bool>("isremoved");

                    b.HasKey("QuestionLecturerEvaluateStudentSolutionId");

                    b.HasIndex("QuestionStudentProvidedSolutionId");

                    b.ToTable("QuestionLecturerEvaluateStudentSolutions");
                });

            modelBuilder.Entity("bim_edu.Models.QuestionStudentProvidedSolution", b =>
                {
                    b.Property<int>("QuestionStudentProvidedSolutionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("FilePath");

                    b.Property<int>("QuestionId");

                    b.Property<bool>("isremoved");

                    b.HasKey("QuestionStudentProvidedSolutionId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionStudentProvidedSolutions");
                });

            modelBuilder.Entity("bim_edu.Models.StudentFeeToPay", b =>
                {
                    b.Property<int>("StudentFeeToPayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<DateTime>("DateInitiated");

                    b.Property<double>("Paid");

                    b.Property<int>("ProgrammeApplicationId");

                    b.Property<string>("Type");

                    b.Property<bool>("isremoved");

                    b.HasKey("StudentFeeToPayId");

                    b.HasIndex("ProgrammeApplicationId");

                    b.ToTable("StudentFeesToPay");
                });

            modelBuilder.Entity("bim_edu.Models.UploadedDocument", b =>
                {
                    b.Property<int>("UploadedDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("FilePath");

                    b.Property<int>("ProgrammeApplicationId");

                    b.Property<bool>("isremoved");

                    b.HasKey("UploadedDocumentId");

                    b.HasIndex("ProgrammeApplicationId");

                    b.ToTable("UploadedDocuments");
                });

            modelBuilder.Entity("bim_edu.Models.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProgrammeId");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.Property<bool>("isremoved");

                    b.HasKey("VideoId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("bim_edu.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("bim_edu.Models.Comment", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("bim_edu.Models.CourseLecturer", "CourseLecturer")
                        .WithMany()
                        .HasForeignKey("CourseLecturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bim_edu.Models.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.CommentReply", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("bim_edu.Models.Comment", "Comment")
                        .WithMany("CommentReplies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.CourseLecturer", b =>
                {
                    b.HasOne("bim_edu.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bim_edu.Models.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bim_edu.Models.Programme")
                        .WithMany("CourseLecturers")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.Lecturer", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("bim_edu.Models.Payment", b =>
                {
                    b.HasOne("bim_edu.Models.StudentFeeToPay")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("StudentFeeToPayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.PaymentByPassCode", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("bim_edu.Models.ProgramDocument", b =>
                {
                    b.HasOne("bim_edu.Models.Programme")
                        .WithMany("ProgramDocuments")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.Programme", b =>
                {
                    b.HasOne("bim_edu.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bim_edu.Models.ProgramCalender", "ProgramCalender")
                        .WithMany()
                        .HasForeignKey("ProgramCalenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.ProgrammeApplication", b =>
                {
                    b.HasOne("bim_edu.Models.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeId");

                    b.HasOne("bim_edu.Models.ApplicationUser")
                        .WithMany("ProgrammeApplications")
                        .HasForeignKey("applicationuserId");
                });

            modelBuilder.Entity("bim_edu.Models.Question", b =>
                {
                    b.HasOne("bim_edu.Models.Programme")
                        .WithMany("Questions")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.QuestionLecturerEvaluateStudentSolution", b =>
                {
                    b.HasOne("bim_edu.Models.QuestionStudentProvidedSolution")
                        .WithMany("QuestionLecturerEvaluateStudentSolutions")
                        .HasForeignKey("QuestionStudentProvidedSolutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.QuestionStudentProvidedSolution", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("bim_edu.Models.Question")
                        .WithMany("QuestionStudentProvidedSolutions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.StudentFeeToPay", b =>
                {
                    b.HasOne("bim_edu.Models.ProgrammeApplication")
                        .WithMany("StudentFeesToPay")
                        .HasForeignKey("ProgrammeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.UploadedDocument", b =>
                {
                    b.HasOne("bim_edu.Models.ProgrammeApplication")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("ProgrammeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bim_edu.Models.Video", b =>
                {
                    b.HasOne("bim_edu.Models.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bim_edu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("bim_edu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
